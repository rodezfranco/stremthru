name: Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  release:
    name: release
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      pull-requests: write
    steps:
      - name: Release
        id: release
        uses: google-github-actions/release-please-action@v4

      - name: Trigger Docker Image Publish
        if: ${{ steps.release.outputs['release_created'] }}
        env:
          GH_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ steps.release.outputs.tag_name }}
        run: |
          gh workflow run --repo ${GITHUB_REPOSITORY} docker-build-push.yml -f ref=${TAG_NAME}

      - name: SDK/JS - Checkout
        if: ${{ steps.release.outputs['sdk/js--release_created'] }}
        uses: actions/checkout@v4
      - name: SDK/JS - Setup pnpm
        if: ${{ steps.release.outputs['sdk/js--release_created'] }}
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          package_json_file: sdk/js/package.json
      - name: SDK/JS - Setup Node.js
        if: ${{ steps.release.outputs['sdk/js--release_created'] }}
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: pnpm
          cache-dependency-path: sdk/js
          registry-url: https://registry.npmjs.org
      - name: SDK/JS - Install Dependencies
        if: ${{ steps.release.outputs['sdk/js--release_created'] }}
        working-directory: sdk/js
        run: pnpm install
      - name: SDK/JS - Build
        if: ${{ steps.release.outputs['sdk/js--release_created'] }}
        working-directory: sdk/js
        run: pnpm run build
      - name: SDK/JS - Publish
        if: ${{ steps.release.outputs['sdk/js--release_created'] }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: sdk/js
        run: pnpm publish

      - name: SDK/PY - Checkout
        if: ${{ steps.release.outputs['sdk/py--release_created'] }}
        uses: actions/checkout@v4
      - name: SDK/PY - Setup Poetry
        if: ${{ steps.release.outputs['sdk/py--release_created'] }}
        run: pipx install poetry
      - name: SDK/PY - Setup Python
        if: ${{ steps.release.outputs['sdk/py--release_created'] }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: poetry
          cache-dependency-path: |
            sdk/py/poetry.lock
            sdk/py/pyproject.toml
      - name: SDK/PY - Install Dependencies
        if: ${{ steps.release.outputs['sdk/py--release_created'] }}
        working-directory: sdk/py
        run: poetry install --with dev
      - name: SDK/PY - Build
        if: ${{ steps.release.outputs['sdk/py--release_created'] }}
        working-directory: sdk/py
        run: poetry build
      - name: SDK/PY - Publish
        if: ${{ steps.release.outputs['sdk/py--release_created'] }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        working-directory: sdk/py
        run: poetry publish --skip-existing
